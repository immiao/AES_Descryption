/*
 * AES_Decrption.cpp
 *
 *  Created on: 2015年4月7日
 *      Author: MIAO
 */
#include <bits/stdc++.h>
using namespace std;

#define BYTE unsigned char

BYTE sBox[256] =
{
   0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
   0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
   0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
   0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
   0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
   0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
   0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
   0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
   0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
   0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
   0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
   0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
   0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
   0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
   0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
   0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};
BYTE inv_sBox[256] =
{
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};
BYTE Rcon[11] =
{
	0x8d, 0x01, 0x02, 0x04, 0x08,
	0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};
BYTE cbcCipherText[4][16];//cbc密文
BYTE cbcIV[16];//cbc初始向量
BYTE ctrCipherText[3][16];//ctr密文
BYTE ctrIV[16];//ctr初始向量
BYTE key[176];//密钥

//CBC解密输入
void CBC_Input()
{
	FILE *fp = fopen("cbc1.txt", "r");
	int input;

	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		key[i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		cbcIV[i] = input;
	}

	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		cbcCipherText[0][i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		cbcCipherText[1][i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		cbcCipherText[2][i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		cbcCipherText[3][i] = input;
	}
	fclose(fp);
}
//CTR解密输入
void CTR_Input()
{
	FILE *fp = fopen("CTR.txt", "r");
	int input;

	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		key[i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		ctrIV[i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		ctrCipherText[0][i] = input;
	}
	for (int i = 0; i < 16; i++)
	{
		fscanf(fp, "%2x", &input);
		ctrCipherText[1][i] = input;
	}
	for (int i = 0; i < 8; i++)
	{
		fscanf(fp, "%2x", &input);
		ctrCipherText[2][i] = input;
	}
	fclose(fp);
}
//旋转字节
void RotWord(BYTE *p)
{
	BYTE temp = p[0];
	p[0] = p[1];
	p[1] = p[2];
	p[2] = p[3];
	p[3] = temp;
}
//替换字节
void SubWord(BYTE *p)
{
	for (int i = 0; i < 4; i++)
	{
		int x = p[i] >> 4;
		int y = p[i] & 0x0F;
		int sboxIndex = x * 16 + y;
		p[i] = sBox[sboxIndex];
	}
}
//密钥扩展
void KeyExpansion()
{
	for (int i = 4; i < 44; i++)
	{
		BYTE t[4];
		if (i % 4 == 0)
		{
			int tmp = (i - 1) * 4;
			for (int j = 0; j < 4; j++)
				t[j] = key[tmp + j];
			RotWord(t);
			SubWord(t);
			t[0] ^= Rcon[i / 4];
			int tmp1 = i * 4;
			int tmp2 = (i - 4) * 4;
			for (int j = 0; j < 4; j++)
				key[tmp1 + j] = t[j] ^ key[tmp2 + j];
		}
		else
		{
			int tmp1 = i * 4;
			int tmp2 = (i - 1) * 4;
			int tmp3 = (i - 4) * 4;
			for (int j = 0; j < 4; j++)
				key[tmp1 + j] = key[tmp2 + j] ^ key[tmp3 + j];
		}
	}
}
//添加每一轮密钥
void AddRoundKey(BYTE *p, int round)
{
	int keyIndex = round * 16;
	for (int i = 0; i < 16; i++)
		p[i] ^= key[keyIndex + i];
}
//GF(2^8)乘法
BYTE mul(int c, int t)
{
	int ans = 0;
	while (c > 0)
	{
		if (c & 1)
			ans ^= t;
		t <<= 1;
		if (t & 256)
			t ^= 283;
		c >>= 1;
	}
	return ans;
}
//逆列混合
void InvMixColumns(BYTE *p)
{
	BYTE t[16];
	for (int i = 0; i < 16; i++)
		t[i] = p[i];
	for (int i = 0; i < 4; i++)
	{
		int s = i * 4;
		p[s] = mul(0x0e, t[s]) ^ mul(0x0b, t[s+1]) ^ mul(0x0d, t[s+2]) ^ mul(0x09, t[s+3]);
		p[s+1] = mul(0x09, t[s]) ^ mul(0x0e, t[s+1]) ^ mul(0x0b, t[s+2]) ^ mul(0x0d, t[s+3]);
		p[s+2] = mul(0x0d, t[s]) ^ mul(0x09, t[s+1]) ^ mul(0x0e, t[s+2]) ^ mul(0x0b, t[s+3]);
		p[s+3] = mul(0x0b, t[s]) ^ mul(0x0d, t[s+1]) ^ mul(0x09, t[s+2]) ^ mul(0x0e, t[s+3]);
	}
}
//列混合
void MixColumns(BYTE *p)
{
	BYTE t[16];
	for (int i = 0; i < 16; i++)
		t[i] = p[i];
	for (int i = 0; i < 4; i++)
	{
		int s = i * 4;
		p[s] = mul(0x02, t[s]) ^ mul(0x03, t[s+1]) ^ t[s+2] ^ t[s+3];
		p[s+1] = t[s] ^ mul(0x02, t[s+1]) ^ mul(0x03, t[s+2]) ^ t[s+3];
		p[s+2] = t[s] ^ t[s+1] ^ mul(0x02, t[s+2]) ^ mul(0x03, t[s+3]);
		p[s+3] = mul(0x03, t[s]) ^ t[s+1] ^ t[s+2] ^ mul(0x02, t[s+3]);
	}
}
//逆行移动
void InvShiftRows(BYTE *p)
{
	for (int i = 1; i < 4; i++)
	{
		int offset = i;
		BYTE temp[4];
		for (int j = 0; j < 4; j++)
			temp[j] = p[(j * 4 - i * 4 + 16) % 16 + offset];

		for (int j = 0; j < 4; j++)
			p[j * 4 + offset] = temp[j];
	}
}
//行移动
void ShiftRows(BYTE *p)
{
	for (int i = 1; i < 4; i++)
	{
		int offset = i;
		BYTE temp[4];
		for (int j = 0; j < 4; j++)
			temp[j] = p[(j * 4 + i * 4) % 16 + offset];

		for (int j = 0; j < 4; j++)
			p[j * 4 + offset] = temp[j];
	}
}
//逆替换字节
void InvSubBytes(BYTE *p)
{
	for (int i = 0; i < 16; i++)
	{
		int x = p[i] >> 4;
		int y = p[i] & 0x0F;
		int sboxIndex = x * 16 + y;
		p[i] = inv_sBox[sboxIndex];
	}
}
//替换字节
void SubBytes(BYTE *p)
{
	for (int i = 0; i < 16; i++)
	{
		int x = p[i] >> 4;
		int y = p[i] & 0x0F;
		int sboxIndex = x * 16 + y;
		p[i] = sBox[sboxIndex];
	}
}
//AES解密
void Descryption(BYTE *p)
{
	AddRoundKey(p, 10);
	InvShiftRows(p);
	InvSubBytes(p);
	for (int round = 9; round >= 1; round--)
	{
		AddRoundKey(p, round);
		InvMixColumns(p);
		InvShiftRows(p);
		InvSubBytes(p);
	}
	AddRoundKey(p, 0);
}
//AES加密
void Encryption(BYTE *p)
{
	AddRoundKey(p, 0);
	for (int round = 1; round <= 9; round++)
	{
		SubBytes(p);
		ShiftRows(p);
		MixColumns(p);
		AddRoundKey(p, round);
	}
	SubBytes(p);
	ShiftRows(p);
	AddRoundKey(p, 10);
}
//CBC解密
void CBC_Descryption()
{
	BYTE temp1[16], temp2[16], temp3[16];
	memcpy(temp1, cbcCipherText[0], sizeof(temp1));
	memcpy(temp2, cbcCipherText[1], sizeof(temp2));
	memcpy(temp3, cbcCipherText[2], sizeof(temp3));
	Descryption(cbcCipherText[0]);
	for (int i = 0; i < 16; i++)
		cbcCipherText[0][i] ^= cbcIV[i];
	Descryption(cbcCipherText[1]);
	for (int i = 0; i < 16; i++)
		cbcCipherText[1][i] ^= temp1[i];
	Descryption(cbcCipherText[2]);
	for (int i = 0; i < 16; i++)
		cbcCipherText[2][i] ^= temp2[i];
	Descryption(cbcCipherText[3]);
	for (int i = 0; i < 16; i++)
		cbcCipherText[3][i] ^= temp3[i];

	for (int i = 0; i < 16; i++)
		cout << cbcCipherText[0][i];
	for (int i = 0; i < 16; i++)
		cout << cbcCipherText[1][i];
	for (int i = 0; i < 16; i++)
		cout << cbcCipherText[2][i];
	for (int i = 0; i < 16; i++)
		cout << cbcCipherText[3][i];
	cout << endl;
}
//CTR解密
void CTR_Descryption()
{
	BYTE temp[16];
	memcpy(temp, ctrIV, sizeof(temp));
	Encryption(temp);
	for (int i = 0; i < 16; i++)
		ctrCipherText[0][i] ^= temp[i];

	ctrIV[15]++;
	memcpy(temp, ctrIV, sizeof(temp));
	Encryption(temp);
	for (int i = 0; i < 16; i++)
		ctrCipherText[1][i] ^= temp[i];

	ctrIV[15]++;
	memcpy(temp, ctrIV, sizeof(temp));
	Encryption(temp);
	for (int i = 0; i < 8; i++)
		ctrCipherText[2][i] ^= temp[i];
	for (int i = 0; i < 16; i++)
		cout << ctrCipherText[0][i];
	for (int i = 0; i < 16; i++)
		cout << ctrCipherText[1][i];
	for (int i = 0; i < 8; i++)
		cout << ctrCipherText[2][i];
	cout << endl;
}
int main()
{
	printf("============================CBC Descryption====================================\n");
	CBC_Input();
	KeyExpansion();
	CBC_Descryption();
	printf("-------------------------------------------------------------------------------\n\n");
	printf("============================CTR Descryption====================================\n");
	CTR_Input();
	KeyExpansion();
	CTR_Descryption();
	printf("-------------------------------------------------------------------------------\n\n");
	system("pause");
}
